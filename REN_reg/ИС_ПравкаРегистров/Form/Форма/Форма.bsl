// +++ ИнфоСофт Суптелов 27-11-2018

#Область РаботаСКонтрагентомИПартнером

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ИНН = ПолучитьИННКонтрагента();
КонецПроцедуры

Функция ПолучитьИННконтрагента()
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Контрагенты.ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ИНН;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентПоПартнеру(Партнер)
	ЗапросНайтиКонтрагента = новый Запрос;	
	ЗапросНайтиКонтрагента.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.Партнер,
	|	Контрагенты.ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование ПОДОБНО &Партнер";
	ЗапросНайтиКонтрагента.УстановитьПараметр("Партнер", "%" + Строка(Партнер)+"%");
	
	Возврат ЗапросНайтиКонтрагента.Выполнить().Выбрать(); 	
КонецФункции

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	ПартнерПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	Объект.СписокПоРегистрамКлиент.Очистить();
	Объект.СписокПоРегистрамПоставщик.Очистить();
	Объект.РасчетыПоДоговорамКредитовИДепозиторов.Очистить();
	Элементы.ПоКлиентам.Видимость = Истина;
	Элементы.ПоПоставщикам.Видимость = Истина;
	ВыборкаКонтрагента = ПолучитьКонтрагентПоПартнеру(Партнер);
	Если ВыборкаКонтрагента.Следующий() тогда
		Контрагент	= ВыборкаКонтрагента.Ссылка;
		ИНН 		= ВыборкаКонтрагента.ИНН;
		ЗаполнитьДанныеТЧ();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТабличныхЧастей 

Процедура ЗаполнитьДанныеТЧ()
	ЗаполнитьДанныеПоКлиенту();
	ЗаполнитьДанныеПоПоставщику();
	ЗаполнитьДанныеПоКредиторамДебиторам();
КонецПроцедуры

// Заполняем тч по данным регистра накопления расчеты с клиентами (РСК), РСК по документам 
&НаСервере
Функция ЗаполнитьДанныеПоКлиенту()
	РезультатЗапроса = ПолучитьДанныеДляЗаполненияТЧКлиента();
	
	Если РезультатЗапроса.Пустой() тогда
		Элементы.ПоКлиентам.Видимость = Ложь;	
		Возврат неопределено;	
	КонецЕслИ;
	
	ТЧДляРаботы = "СписокПоРегистрамКлиент";
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтрТЧКлиент = Объект.СписокПоРегистрамКлиент.Добавить();	
		ЗаполнитьЗначенияСвойств(НовСтрТЧКлиент, ВыборкаДетальныеЗаписи);	
	КонецЦикла;
	СвернутьКолонки(Объект.СписокПоРегистрамПоставщик,0);		
КонецФункции // ЗаполнитьДанныеПоКлиенту()

// Заполняем тч по данным регистра накопления расчеты с Поставщиками(РСП), РСП по документам 
Функция ЗаполнитьДанныеПоПоставщику()
	РезультатЗапроса = ПолучитьДанныеДляЗаполненияТЧПоставщика();
	
	Если РезультатЗапроса.Пустой() тогда
		Элементы.ПоПоставщикам.Видимость = Ложь;	
		Возврат	неопределено;
	КонецЕслИ;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТЧДляРаботы	= "СписокПоРегистрамПоставщик";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтрТЧПоставщик = Объект.СписокПоРегистрамПоставщик.Добавить();	
		ЗаполнитьЗначенияСвойств(НовСтрТЧПоставщик, ВыборкаДетальныеЗаписи);	
		НовСтрТЧПоставщик.Регистр = СтрЗаменить(НовСтрТЧПоставщик.Регистр, "Остатки","");	
	КонецЦикла;
	СвернутьКолонки(Объект.СписокПоРегистрамПоставщик, 1);
КонецФункции // ЗаполнитьДанныеПоПоставщику()

Функция ЗаполнитьДанныеПоКредиторамДебиторам()
	РезультатЗАпроса = ПолучитьДанныеПоКредиторамДебиторам();
	
	Если РезультатЗапроса.Пустой() тогда
		Элементы.ПоДебКредит.Видимость = Ложь;	
		Возврат неопределено;	
	КонецЕслИ;
	
	ТЧДляРаботы = "РасчетыПоДоговорамКредитовИДепозиторов";
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтрТЧКлиент = Объект.РасчетыПоДоговорамКредитовИДепозиторов.Добавить();	
		ЗаполнитьЗначенияСвойств(НовСтрТЧКлиент, ВыборкаДетальныеЗаписи);	
	КонецЦикла;
	СвернутьКолонки(Объект.СписокПоРегистрамПоставщик,0);		
КонецФункции // ЗаполнитьДанныеПоКредиторамДебиторам()

Функция ПолучитьДанныеПоКредиторамДебиторам()
	Запрос = новый Запрос("ВЫБРАТЬ
	                      |	РасчетыПоДоговорамКредитовИДепозитовОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	                      |	РасчетыПоДоговорамКредитовИДепозитовОстатки.Договор КАК Договор,
	                      |	РасчетыПоДоговорамКредитовИДепозитовОстатки.ТипСуммы КАК ТипСуммы,
	                      |	РасчетыПоДоговорамКредитовИДепозитовОстатки.СуммаВВалютеОстаток КАК СуммаВВалюте,
	                      |	РасчетыПоДоговорамКредитовИДепозитовОстатки.СуммаУпрОстаток КАК СуммаУПР,
	                      |	РасчетыПоДоговорамКредитовИДепозитовОстатки.СуммаРеглОстаток КАК СуммаРегл,
	                      |	""РасчетыПоДоговорамКредитовИДепозитов"" КАК РЕГИСТР
	                      |ИЗ
	                      |	РегистрНакопления.РасчетыПоДоговорамКредитовИДепозитов.Остатки(&Дата, АналитикаУчетаПоПартнерам.Контрагент.инн = &Контрагент) КАК РасчетыПоДоговорамКредитовИДепозитовОстатки");
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	Если не ЗначениеЗаполнено(ИНН) тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АналитикаУчетаПоПартнерам.Контрагент.инн", "АналитикаУчетаПоПартнерам.Партнер");
	КонецЕсли;
	Запрос.УстановитьПараметр("Контрагент", ?(ЗначениеЗаполнено(ИНН),ИНН, Партнер));
	
	Возврат Запрос.Выполнить();
КонецФункции

Функция ПолучитьДанныеДляЗаполненияТЧПоставщика()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|	NULL КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиОстатки.Валюта КАК Валюта,
	|	NULL КАК ДолгУпр,
	|	NULL КАК ДолгРегл,
	|	NULL КАК Предоплата,
	|	NULL КАК ПредоплатаУпр,
	|	NULL КАК ПредоплатаРегл,
	|	NULL КАК КВозврату,
	|	NULL КАК Долг,
	|	NULL КАК ЗалогЗаТару,
	|	""РасчетыСПоставщиками"" КАК Регистр,
	|	NULL КАК ЗалогЗаТаруРегл,
	|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК Сумма,
	|	РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток КАК Оплачивается,
	|	РасчетыСПоставщикамиОстатки.КОплатеОстаток КАК КОплате,
	|	РасчетыСПоставщикамиОстатки.КПоступлениюОстаток КАК КПоступлениюОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Дата, АналитикаУчетаПоПартнерам.Контрагент.инн = &Контрагент) КАК РасчетыСПоставщикамиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоДокументамОстатки.АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоДокументамОстатки.ЗаказПоставщику,
	|	РасчетыСПоставщикамиПоДокументамОстатки.РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоДокументамОстатки.Валюта,
	|	РасчетыСПоставщикамиПоДокументамОстатки.ДолгУпрОстаток,
	|	РасчетыСПоставщикамиПоДокументамОстатки.ДолгРеглОстаток,
	|	РасчетыСПоставщикамиПоДокументамОстатки.ПредоплатаОстаток,
	|	РасчетыСПоставщикамиПоДокументамОстатки.ПредоплатаУпрОстаток,
	|	РасчетыСПоставщикамиПоДокументамОстатки.ПредоплатаРеглОстаток,
	|	РасчетыСПоставщикамиПоДокументамОстатки.КВозвратуОстаток,
	|	РасчетыСПоставщикамиПоДокументамОстатки.ДолгОстаток,
	|	РасчетыСПоставщикамиПоДокументамОстатки.ЗалогЗаТаруОстаток,
	|	""РасчетыСПоставщикамиПоДокументам"",
	|	РасчетыСПоставщикамиПоДокументамОстатки.ЗалогЗаТаруРеглОстаток,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&Дата, АналитикаУчетаПоПартнерам.Контрагент.инн = &Контрагент) КАК РасчетыСПоставщикамиПоДокументамОстатки";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	Если не ЗначениеЗаполнено(ИНН) тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АналитикаУчетаПоПартнерам.Контрагент.инн", "АналитикаУчетаПоПартнерам.Контрагент");
	КонецЕсли;
	Запрос.УстановитьПараметр("Контрагент", ?(ЗначениеЗаполнено(ИНН),ИНН, Контрагент));
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляЗаполненияПоставщика()

Функция ПолучитьДанныеДляЗаполненияТЧКлиента()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиПоДокументамОстатки.ЗаказКлиента КАК ЗаказКлиента,
	|	РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоДокументамОстатки.Валюта КАК Валюта,
	|	РасчетыСКлиентамиПоДокументамОстатки.УдалитьДатаПлатежа КАК УдалитьДатаПлатежа,
	|	РасчетыСКлиентамиПоДокументамОстатки.УдалитьКОтгрузкеОстаток КАК УдалитьКОтгрузке,
	|	РасчетыСКлиентамиПоДокументамОстатки.УдалитьКОплатеОстаток КАК УдалитьКОплате,
	|	РасчетыСКлиентамиПоДокументамОстатки.КВозвратуОстаток КАК КВозврату,
	|	РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток КАК Долг,
	|	РасчетыСКлиентамиПоДокументамОстатки.ДолгУпрОстаток КАК ДолгУпр,
	|	РасчетыСКлиентамиПоДокументамОстатки.ДолгРеглОстаток КАК ДолгРегл,
	|	РасчетыСКлиентамиПоДокументамОстатки.ПредоплатаОстаток КАК Предоплата,
	|	РасчетыСКлиентамиПоДокументамОстатки.ПредоплатаУпрОстаток КАК ПредоплатаУпр,
	|	РасчетыСКлиентамиПоДокументамОстатки.ПредоплатаРеглОстаток КАК ПредоплатаРегл,
	|	РасчетыСКлиентамиПоДокументамОстатки.ЗалогЗаТаруОстаток КАК ЗалогЗаТару,
	|	РасчетыСКлиентамиПоДокументамОстатки.ЗалогЗаТаруРеглОстаток КАК ЗалогЗаТаруРегл,
	|	NULL КАК Сумма,
	|	NULL КАК КОплате,
	|	NULL КАК Оплачивается,
	|	NULL КАК КОтгрузке,
	|	NULL КАК Откружается,
	|	""РасчетыСКлиентамиПоДокументам"" КАК Регистр
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&Дата, АналитикаУчетаПоПартнерам.Контрагент.инн = &Контрагент) КАК РасчетыСКлиентамиПоДокументамОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ЗаказКлиента,
	|	NULL,
	|	РасчетыСКлиентами.Валюта,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РасчетыСКлиентами.СуммаОстаток,
	|	РасчетыСКлиентами.КОплатеОстаток,
	|	РасчетыСКлиентами.ОплачиваетсяОстаток,
	|	РасчетыСКлиентами.КОтгрузкеОстаток,
	|	РасчетыСКлиентами.ОтгружаетсяОстаток,
	|	""РасчетыСКлиентами""
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Дата, АналитикаУчетаПоПартнерам.Контрагент.инн = &Контрагент) КАК РасчетыСКлиентами";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Если не ЗначениеЗаполнено(ИНН) тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АналитикаУчетаПоПартнерам.Контрагент.инн", "АналитикаУчетаПоПартнерам.Контрагент");
	КонецЕсли;
	Запрос.УстановитьПараметр("Контрагент", ?(ЗначениеЗаполнено(ИНН),ИНН, Контрагент));
	Возврат Запрос.Выполнить();	
	
КонецФункции // ПолучитьДанныеДляЗаполненияКлиента()

&НаКлиенте
Процедура ЗаполнитьТЧ(Команда)
	ЗаполнитьДанныеТЧ();
КонецПроцедуры

#КонецОбласти  

#Область СозданиеКорректировки

&НаКлиенте
Процедура СоздатьКорректировку(Команда)
	ПоказатьЗначение(,СоздатьКорректировкуНаСервере());
КонецПроцедуры

&НаСервере
Функция СоздатьКорректировкуНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	Док = Документы.КорректировкаРегистров.СоздатьДокумент();
	СоздатьДокДвиженияНаКорректировку(док, ТЧДляРаботы);
	Док.Дата  = ТекущаяДата();
	Док.Записать(РежимЗаписиДокумента.Запись);
	Возврат Док.Ссылка;
КонецФункции

Процедура СоздатьДокДвиженияНаКорректировку(Док, ТЧДляРаботы)
	КоличествоСтрок = Объект[ТЧДляРаботы].Количество() ;
	Итератор = 0;
	МассивКОрректируемыхРегистров = новый массив;
	Пока итератор < КоличествоСтрок  цикл
		СтрокаТЧКЛ = Объект[ТЧДляРаботы][Итератор];
		
		РесурсыРегистра = Метаданные.РегистрыНакопления[СтрокаТЧКЛ.Регистр].Ресурсы;
		
		Если не СтрокаТЧКл.ПровестиКорректировку Тогда
			Итератор = Итератор +1;
			Продолжить;
		КонецЕсли;
		
		ДвиженияПоРегистру = Док.Движения[СтрокаТЧКЛ.Регистр].Добавить();		
		ЗаполнитьЗначенияСвойств(ДвиженияПоРегистру, СтрокаТЧКЛ);
		//ДвиженияПоРегистру.ДатаПлатежа = ТекущаяДата();
		ДвиженияПоРегистру.Период = ТекущаяДата();
		Если НЕ НовКлючАналитики.Пустая() тогда
			НовДвижения = Док.Движения[СтрокаТЧКЛ.Регистр].Добавить();
			СоздатьДвиженияСНовымКлючом(НовДвижения, ДвиженияПоРегистру)	
		КонецЕсли;
		
		Для каждого Ресурс из РесурсыРегистра цикл
			ДвиженияПоРегистру[Ресурс.Имя]= - ДвиженияПоРегистру[Ресурс.Имя];
		КонецЦикла;
		
		//ДвиженияПоРегистру.АналитикаУчетаПоПартнерам = НовКлючАналитики;
		ЗаполнениеТЧКорректировки(МассивКОрректируемыхРегистров,ПолучитьИмяРегистра(ДвиженияПоРегистру), док,ДвиженияПоРегистру);
		Док.Комментарий = Док.Комментарий + СтрокаТЧКЛ.АналитикаУчетаПоПартнерам+ Символы.ВК;
		Итератор = Итератор +1;
	КонецЦикла;	
КонецПроцедуры	

Функция СоздатьДвиженияСНовымКлючом(НовДвижения, ДвиженияПоРегистру)
	ЗаполнитьЗначенияСвойств(НовДвижения, ДвиженияПоРегистру);
	НовДвижения.АналитикаУчетаПоПартнерам = НовКлючАналитики;
	
КонецФункции // СоздатьДвиженияСНовымКлючом()

Функция ЗаполнениеТЧКорректировки(Массив,ИмяРегистра, Док,ДвиженияПоРегистру)
	Если Массив.Найти(Имярегистра) = Неопределено  тогда
		СтрокаТЧДока = Док.ТаблицаРегистров.Добавить();
		СтрокаТЧДока.Имя = СтрЗаменить(Строка(ДвиженияПоРегистру), "РегистрНакопленияЗапись.", "");
		Массив.Добавить(ИмяРегистра);	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ЗаполнениеТЧКорректировки()

Функция ПолучитьИмяРегистра(Движения)
	
	Возврат СтрЗаменить(Строка(Движения), "РегистрНакопленияЗапись.", "");
	
КонецФункции	

Функция ВернутьВалидноеИмяРесурса(Ресурс)
	Возврат СтрЗаменить(Строка(Ресурс), " ", "")	
КонецФункции

#КонецОбласти 


Процедура СвернутьКолонки(ТЧ, НомерТЧ)
	//Если ТЧ.Количество() = 0 тогда
	//	Возврат;	
	//КонецЕслИ;
	// КоллекцияРеквизитовТЧ = РеквизитФормыВЗначение("Объект").Метаданные().ТабличныеЧасти[НомерТЧ];
	//ИмяТЧ = КоллекцияРеквизитовТЧ.Имя;	
	//
	//КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);
	//ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	//
	//Для каждого Колонка из КоллекцияРеквизитовТЧ.Реквизиты Цикл
	//
	//	Если не  Колонка.Тип = ОписаниеЧисла тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если ТЧ.Итог(Колонка.Имя) = 0 тогда
	//		попытка 
	//			Элементы[Строка(ИмяТЧ)+ Колонка.Имя].Видимость = Ложь;
	//		Исключение
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьПоставщиковПриИзменении(Элемент)
	Элементы.ПоПоставщикам.Видимость = ВидимостьПоставщиков;
	Если ВидимостьПоставщиков тогда
		ТЧДляРаботы = "СписокПоРегистрамПоставщик";
	Иначе 
		ТЧДляРаботы = "СписокПоРегистрамКлиент";
	КонецЕслИ;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКлиетовПриИзменении(Элемент)
	Элементы.ПоКлиентам.Видимость = ВидимостьКлиетов;
	Если ВидимостьКлиетов тогда
		ТЧДляРаботы = "СписокПоРегистрамКлиент";
	Иначе
		ТЧДляРаботы = "СписокПоРегистрамПоставщик";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЧ_по_ключу(Команда)
	ТЧ_по_ключуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТЧ_по_ключуНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКредиторыПриИзменении(Элемент)
	Элементы.ПоДебКредит.Видимость = ВидимостьКредиторы;
	Если ВидимостьКредиторы тогда
		ТЧДляРаботы = "РасчетыПоДоговорамКредитовИДепозиторов";
	КонецЕсли;
КонецПроцедуры

// --- ИнфоСофт Суптелов 27-11-2018
